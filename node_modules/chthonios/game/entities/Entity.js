var Common = require("chthonios/rt/Common");
var Environment = Common.Environment.load({});

var HelmModel = require("chthonios/game/logic/EntityHelm");

/**
 * Global entity super type.
 * 
 * @class
 */
var Entity = Environment.Class.extend(
/** @lends Entity.prototype */
{
	/**
	 * Initialize the entity.
	 */
	init : function(type, x, y) {
		this.id = 0;
		this.x = x;
		this.y = y;
		this.type = type;
		this.helm = new HelmModel.EntityHelm();
	},

	save : function(map) {
		map.id = this.id;
		map.x = this.x;
		map.y = this.y;
		map.type = this.type;
		return map;
	},
	load : function(map) {
		this.id = map.id;
		this.x = map.x;
		this.y = map.y;
		this.type = map.type;
	},

	/**
	 * Move the entity by delta dx, dy.
	 * 
	 * @param {Number} dx delta x
	 * @param {Number} dy delta y
	 */
	move : function(dx, dy) {
		this.x += dx;
		this.y += dy;
	},

	/**
	 * Set the entity position.
	 * 
	 * @param {Number} x new x
	 * @param {Number} y new y
	 */
	setPosition : function(x, y) {
		this.x = x;
		this.y = y;
	},

	/**
	 * Get the entity position.
	 * 
	 * @returns {Object} descriptor [x, y]
	 */
	getPosition : function() {
		return {
			x : this.x,
			y : this.y
		};
	},

	/**
	 * Get the packet to send to the client.
	 * 
	 * @returns {Object} data table object
	 */
	getPacket : function() {
		return {
			id : this.id,
			x : this.x,
			y : this.y,
			type : this.type
		};
	},

	/**
	 * Called to update the entity logic.
	 */
	update : function() {
		this.helm.update(this);
	}
}, "Entity");

/**
 * @class EntityLiving
 */
var EntityLiving = Entity.extend(
/** @lends EntityLiving.prototype */
{
	init : function(type, x, y, h) {
		this._super(type, x, y);
		this.health = h;
		this.maxHealth = h;
	},

	getPacket : function() {
		var packet = this._super();
		packet.health = this.health;
		packet.maxHealth = this.maxHealth;
		return packet;
	}
}, "EntityLiving");

module.exports = {
	HelmModel : HelmModel,
	Entity : Entity,
	EntityLiving : EntityLiving
}