var Common = require("chthonios/rt/Common");
var Environment = Common.Environment.load({});
var Entity = require("chthonios/game/entities/Entity");

/**
 * Binary flag name map, used as a lookup table for StateStream.
 */
var BinaryFlag = {
	/** Used to store NULL values */
	FLAG_NULL : 0x01,
	/** Used to store NUMBER values */
	FLAG_NUMBER : 0x02,
	/** Used to store STRING values */
	FLAG_STRING : 0x03,
	/** Used to store BOOLEAN values */
	FLAG_BOOLEAN : 0x04,

	/** Used to store NamedList meta-type */
	FLAG_LIST : 0x05,

	/** Used to store Entity object */
	OBJECT_ENTITY : 0xA0,
	/** Used to signify the explicit STOP of an object. */
	OBJECT_STOP : 0xAF,
	/** Reserved for future expansion */
	OBJECT_RESERVED : [ 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE ],

	/** Used to signify the start of the NAMES table */
	REGION_NAMES : 0xF1,
	/** Used to signify the start of the OBJECTS table */
	REGION_OBJECTS : 0xF2,
	/** Used to signify the explicit STOP of a table. */
	REGION_STOP : 0xFF,
	/** Reserved for future expansion */
	REGION_RESERVED : [ 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE ]
};

/**
 * @class StateSnapshot
 */
var StateSnapshot = Environment.Class.extend(
/** @lends StateSnapshot.prototype */
{
	toIndex : null,
	table_names : null,
	obj_entity : null,
	/**
	 * Initializer
	 */
	init : function() {
		this.toIndex = [];
	},

	/**
	 * Queue an entity for save.
	 * 
	 * @param {Entity} entity The entity to save.
	 */
	enqueueEntity : function(entity) {
		if (this.toIndex.indexOf(entity) === -1)
			this.toIndex.push(entity);
	},

	/**
	 * Resets the internal tables.
	 */
	reset : function() {
		this.table_names = [];
		this.obj_entity = [];
	},

	/**
	 * Converts the enqueued objects to be converted to table data form. The table data is generated from values copied
	 * from each enqueued object at the time of the snapshot call. The values in the table are non-transient;
	 * modifications to the tables produced will not modify the underlying objects from which the value was originally
	 * generated.
	 */
	snapshot : function() {
		for (var i = 0; i < this.toIndex.length; i++) {
			var entity = this.toIndex[i];
			var entitydata = entity.save({});
			var estate = {};
			for (var name in entitydata)
				estate[this.__name2slot(name)] = entitydata[name];
			this.obj_entity.push(estate);
		}
	},

	/**
	 * Get or create the slot of name name.
	 * 
	 * @param {String} name The name
	 * @returns {Number} The slot
	 */
	__name2slot : function(name) {
		var idx = this.table_names.indexOf(name);
		if (idx !== -1)
			return idx;
		this.table_names.push(name);
		return this.table_names.length - 1;
	},

	/**
	 * Get the name signified at slot slot.
	 * @param {Number} slot The slot
	 * @returns {String} The name
	 */
	__slot2name : function(slot) {
		return this.table_names[slot];
	}

}, "StateSnapshot");

/**
 * Game state streaming engine.
 * 
 * @class StateStream
 */
var StateStream = Environment.Class.extend(
/** @lends StateStream.prototype */
{
	/**
	 * The binary input stream
	 * 
	 * @member
	 */
	is : null,
	/**
	 * The binary output stream
	 * 
	 * @member
	 */
	os : null,

	/**
	 * The name table
	 * 
	 * @member
	 */
	__names : null,

	/**
	 * The objects table
	 * 
	 * @member
	 */
	__objects : null,

	/**
	 * Initializes the stream wrapper.
	 */
	init : function(is, os) {
		this.is = is;
		this.os = os;
	},

}, "StateStream");

module.exports = {
	/** @type StateStream */
	StateStream : StateStream,
	/** @type StateSnapshot */
	StateSnapshot : StateSnapshot
}